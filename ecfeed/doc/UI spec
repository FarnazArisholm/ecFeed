UI Spec

New file wizard:
- The wizard is accessible by menu File->New->Other and then ecFeed->New Equivalence Class Tree file
- It consists of a Container field, container selection tree viewer and file name field
- The container field is initially filled according to current selection if possible
- if the file name does not have "ect" extension it is added (as soon as focus leaves file name text)
- If the file already exists, user is asked for confirmation of overwritting the file
- The default file name is newEct.ect
- The model name is the same as the file name with removed extension
- The finish button is disabled when any of the entries is not valid

Model details page
- Model name initially is the same as the file name (without 'ect' extension)
- Test classes viewer
  - double click on a class selects the class in the model tree viewer 
  - the classes in the viewer are sortable by local name or qualified name
- "Rename..." button opens a dialog for renaming model
  - the model name has no deeper meaning so any string between 1 and 64 characters may be used as the name
  - the file name is not changed when the model is renamed
- Add test class button
  - opens a dialog where a class that is to be added to the model can be selected
  - "OK" button is enabled only when a class with at least one test method is selected 
  - Trying to add a class that is already contained in the model (the qualified name is checked) results in a error message
  - A model of the class is created containing all methods annotated with @Test
- "Remove Selected Classes" button removes from the model all selected classes in the viewer 
  
Class details page
- open the page
  - if class model contains methods not contained in the class, they are marked with 
    "obsolete" and displayed red
  - if the class contains test methods annotated with @Test that are not in the model, 
    they are displayed in the "Other test methods..." section
  - if there are no test methods in the class that are not contained in the model 
    (i.e. the class is up to date from that point of view), the "Other test methods..." section 
    is hidden   
- refresh button
  - test "Other test methods..." section behavior:
    Scenario I:
      1. Class model is up to date, "Other..." section hidden
      2. a test method is added to a class source
      3. refresh button is clicked
      4. the method appears in "Other..." section
    Scenario II:
      1. Class model not up to date, some functions already in the "Other..." section
      2. test class modified, so the model becomes up to date
      3. Refresh
      4. "Other..." section disappears
    Scenario III
      1. Class model is up to date, "Other..." section hidden
      2a. parameters of a test method are modified, so the parameter types stay the same, but names change
      2b. parameters of a test method are modified, so the parameter types change, but names stay the same
      2c. parameters of a test method are modified, both parameter types and names change
      3. refresh button is clicked
      4. the updated method appears in "Other..." section, the actual method is marked "obsolete"
    Scenario IV
      1. Class model is not up to date, one method is marked obsolete and one is contained in the "Other..." section
      2. The method is modified, so it matches the models marked as obsolete
      3. The "Other..." section disappears, the obsolete method is now valid
- remove button
  - the warning message is displayed
  - the class is removed and the model details page is displayed
- remove selected button:
  - test if a warning dialog appears (all test cases and customized partitions will be lost) 
  - test remove obsolete method - the method is lost
  - test remove valid methods - they should appear in the "Other..." section
- add selected button
  - add all methods from the "Other..." section -> the section should disappear
  - add some of the methods from "Other..." section, they should disappear from the section, but the section should
    stay visible
  - check validity of the model of added methods        
- Methods viewer
  -check double click on a method
  
Method details page
- check section layout
  - the page title is the function name with parameters
  - the Parameters section is initially folded
- Change button
  - The "Rename method" dialog displays all methods from the class that have the same number and types of parameters
  - methods with different parameter types although the same names are not displayed 
  - methods already contained in the model are not displayed
  - the method changes name to the selected method in the dialog and changes names of corresponding parameters, 
    the test cases generated for the method are not affected (but corresponding parameter names are also updated 
    in a view)
- Parameters section
  - folding (initially folded)
  - double click on a parameter in the viewer opens category details page
- Test cases section
  - "Add Test Case" button
    - opens "New test case" dialog
    - The Test suite combo is initially filled with "default suite" text
    - the combo contains all the test suites used for the method already
    - The parameters are listed in the order they appear in the method
    - the default values for parameters are first partition on the list
    - The "Value" column displays current value of the selected partition
    - Clicking "OK" results in creating a test case with name currently displayed in the combo
      and parameter values currently selected in the "Partition" column, even if the "Value"
      column is not refreshed yet.
  - "Rename Suite..." button
    - opens "Rename test suite" dialog
    - The "select test suite to rename" combo contains all test suites used currently in the method
    - OK button is disabled if the text field is empty or contains more than 64 characters
    - pressing OK changes test suite of all test cases from the test suite in the combo to name 
      from the text field.
  - "Generate Test Suite" button
    - TBD.
  - "Remove Selected" button
    - displays confirmation dialog
    - removes selected test cases
  - "Remove Suites..." button
    - opens "Remove test suites" dialog with checkbox list containing all test suites used in the method
    - pressing OK removes all test cases belonging to checked suites
  - Double click on test cases opens test case details page
      
Category details page
- The page title contains name and type of the represented parameter
- Partitions viewer
  - The partitions viewer displays all defined partitions for category
  - Editing partition name
    - Clicking on a name of the partition name selects the entire name and allows to edit it. 
    - New name is confirmed with Enter
    - Trying to enter empty or too long (over 64 chars) name results in message box and 
      reverts to the old name
    - Partition names are unique in a category
    - changing name of a partition immediately results in changing the name in all test cases that refer
      to that partition
  - Editing partition value
    - clicking on the value selects entire string representing value and allows to enter new value
    - new value is confirmed by Enter key
    - value that is not valid for the category (e.g. a text that is representing a number for numerical categories,
      floating point number for integer etc.) is not accepted, a message box is displayed
    - "/null" (without quotation marks) represent null value for String category (other types may not have null value
    - ENTERING NON ASCII VALUES FOR CHAR CATEGORY WILL BE DETERMINED IN THE FUTURE
  - double click on a partition opens partition details page
- "Add Partition" button
  - opens a dialog with two text boxes for partition name and value.
  - name and value are validated according to the same rules as when edited for existing partitions
  - when either name or value is not valid, the OK button is disabled and appropriate communicate is displayed
  - initially the OK button is disabled, until name and value of new partition are entered correctly
- "Remove Selected" button
  - removes selected partitions
  - a category must have at least one partition 
  - when last partition is tried to be removed, an error message is displayed
  - test cases referring to removed partitions are removed
    
Test case details page
- Page title has following form: [test suite name]: method(partition names)
- "Remove" button removes the test case from the model
- The test suite combo is used to configure the name of the suite where the test case belongs
  - The combo contains all test suites currently used for the method
  - new name (either selected from the combo, or entered anew) is accepted by pressing Enter or clicking "Change" button
  - test suite name may not be blank or consist of only blank characters or be longer than 64 characters
- Editing test cases
  - Test cases may be edited by clicking on value in "Partition"
  - clicking on a partition name opens a combo box that displays all partitions for given parameter (name and represented value)
  - clicking on a value results in an immediate update of the test case
  
Partition details page
- the title of the page has form name: value
- Editing partition name and value is done according to the same rules as in case of editing them in the category page
- new values (for name and value) are accepted either by pressing Enter or by clicking "Change" button

  
Test Runner spec

The test runner is responsible for running tests defined in a test class. The runner is defined in EcFeeder class.

- To run tests defined in a ect file, the test class must be annotated with @RunWith(EcFeeder.class).
- The model that is used     